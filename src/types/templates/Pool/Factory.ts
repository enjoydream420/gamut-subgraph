// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  _getProtocolSwapFeePercentage(): BigInt {
    let result = super.call(
      "_getProtocolSwapFeePercentage",
      "_getProtocolSwapFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__getProtocolSwapFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_getProtocolSwapFeePercentage",
      "_getProtocolSwapFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allPools(param0: BigInt): Address {
    let result = super.call("allPools", "allPools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allPools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allPools", "allPools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPoolsLength(): BigInt {
    let result = super.call("allPoolsLength", "allPoolsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allPoolsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allPoolsLength",
      "allPoolsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  create(
    tokenA: Address,
    tokenB: Address,
    weightA: BigInt,
    weightB: BigInt,
    _swapFeePercentage: BigInt,
    _changeSwapFee: boolean
  ): Address {
    let result = super.call(
      "create",
      "create(address,address,uint256,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(weightA),
        ethereum.Value.fromUnsignedBigInt(weightB),
        ethereum.Value.fromUnsignedBigInt(_swapFeePercentage),
        ethereum.Value.fromBoolean(_changeSwapFee)
      ]
    );

    return result[0].toAddress();
  }

  try_create(
    tokenA: Address,
    tokenB: Address,
    weightA: BigInt,
    weightB: BigInt,
    _swapFeePercentage: BigInt,
    _changeSwapFee: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "create",
      "create(address,address,uint256,uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(weightA),
        ethereum.Value.fromUnsignedBigInt(weightB),
        ethereum.Value.fromUnsignedBigInt(_swapFeePercentage),
        ethereum.Value.fromBoolean(_changeSwapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPool(param0: Address, param1: Address): Address {
    let result = super.call("getPool", "getPool(address,address):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toAddress();
  }

  try_getPool(param0: Address, param1: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPool",
      "getPool(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProtocolFeesCollector(): Address {
    let result = super.call(
      "getProtocolFeesCollector",
      "getProtocolFeesCollector():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getProtocolFeesCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProtocolFeesCollector",
      "getProtocolFeesCollector():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get routerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get weightA(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get weightB(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _swapFeePercentage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _changeSwapFee(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCollectorCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCollectorCall__Inputs {
    return new SetProtocolFeeCollectorCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCollectorCall__Outputs {
    return new SetProtocolFeeCollectorCall__Outputs(this);
  }
}

export class SetProtocolFeeCollectorCall__Inputs {
  _call: SetProtocolFeeCollectorCall;

  constructor(call: SetProtocolFeeCollectorCall) {
    this._call = call;
  }

  get _newProtocolFeeCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolFeeCollectorCall__Outputs {
  _call: SetProtocolFeeCollectorCall;

  constructor(call: SetProtocolFeeCollectorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
