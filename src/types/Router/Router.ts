// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolBalanceChanged extends ethereum.Event {
  get params(): PoolBalanceChanged__Params {
    return new PoolBalanceChanged__Params(this);
  }
}

export class PoolBalanceChanged__Params {
  _event: PoolBalanceChanged;

  constructor(event: PoolBalanceChanged) {
    this._event = event;
  }

  get liquidityProvider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get deltas(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get protocolFeeAmounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get tokenIn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get protocolSwapFeeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Router extends ethereum.SmartContract {
  static bind(address: Address): Router {
    return new Router("Router", address);
  }

  Factory(): Address {
    let result = super.call("Factory", "Factory():(address)", []);

    return result[0].toAddress();
  }

  try_Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("Factory", "Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _weth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchSwapCall extends ethereum.Call {
  get inputs(): BatchSwapCall__Inputs {
    return new BatchSwapCall__Inputs(this);
  }

  get outputs(): BatchSwapCall__Outputs {
    return new BatchSwapCall__Outputs(this);
  }
}

export class BatchSwapCall__Inputs {
  _call: BatchSwapCall;

  constructor(call: BatchSwapCall) {
    this._call = call;
  }

  get swaps(): Array<BatchSwapCallSwapsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BatchSwapCallSwapsStruct
    >();
  }

  get assets(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get funds(): BatchSwapCallFundsStruct {
    return this._call.inputValues[2].value.toTuple() as BatchSwapCallFundsStruct;
  }

  get limits(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BatchSwapCall__Outputs {
  _call: BatchSwapCall;

  constructor(call: BatchSwapCall) {
    this._call = call;
  }

  get assetDeltas(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class BatchSwapCallSwapsStruct extends ethereum.Tuple {
  get assetInIndex(): BigInt {
    return this[0].toBigInt();
  }

  get assetOutIndex(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }
}

export class BatchSwapCallFundsStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }
}

export class ExitPoolCall extends ethereum.Call {
  get inputs(): ExitPoolCall__Inputs {
    return new ExitPoolCall__Inputs(this);
  }

  get outputs(): ExitPoolCall__Outputs {
    return new ExitPoolCall__Outputs(this);
  }
}

export class ExitPoolCall__Inputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get request(): ExitPoolCallRequestStruct {
    return this._call.inputValues[1].value.toTuple() as ExitPoolCallRequestStruct;
  }
}

export class ExitPoolCall__Outputs {
  _call: ExitPoolCall;

  constructor(call: ExitPoolCall) {
    this._call = call;
  }
}

export class ExitPoolCallRequestStruct extends ethereum.Tuple {
  get tokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get minAmountsOut(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get userData(): Bytes {
    return this[2].toBytes();
  }
}

export class JoinPoolCall extends ethereum.Call {
  get inputs(): JoinPoolCall__Inputs {
    return new JoinPoolCall__Inputs(this);
  }

  get outputs(): JoinPoolCall__Outputs {
    return new JoinPoolCall__Outputs(this);
  }
}

export class JoinPoolCall__Inputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get request(): JoinPoolCallRequestStruct {
    return this._call.inputValues[1].value.toTuple() as JoinPoolCallRequestStruct;
  }
}

export class JoinPoolCall__Outputs {
  _call: JoinPoolCall;

  constructor(call: JoinPoolCall) {
    this._call = call;
  }
}

export class JoinPoolCallRequestStruct extends ethereum.Tuple {
  get tokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get userData(): Bytes {
    return this[2].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetHedgeFactoryCall extends ethereum.Call {
  get inputs(): SetHedgeFactoryCall__Inputs {
    return new SetHedgeFactoryCall__Inputs(this);
  }

  get outputs(): SetHedgeFactoryCall__Outputs {
    return new SetHedgeFactoryCall__Outputs(this);
  }
}

export class SetHedgeFactoryCall__Inputs {
  _call: SetHedgeFactoryCall;

  constructor(call: SetHedgeFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHedgeFactoryCall__Outputs {
  _call: SetHedgeFactoryCall;

  constructor(call: SetHedgeFactoryCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get singleSwap(): SwapCallSingleSwapStruct {
    return this._call.inputValues[0].value.toTuple() as SwapCallSingleSwapStruct;
  }

  get funds(): SwapCallFundsStruct {
    return this._call.inputValues[1].value.toTuple() as SwapCallFundsStruct;
  }

  get limit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amountCalculated(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapCallSingleSwapStruct extends ethereum.Tuple {
  get tokenIn(): Address {
    return this[0].toAddress();
  }

  get tokenOut(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }
}

export class SwapCallFundsStruct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
